<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> <!-- used by XSLT processors -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?> <!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?> <!-- generate a ToC -->
<?rfc tocdepth="3"?> <!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?> <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->
<!-- control vertical white space: 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?> <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?> <!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc  category="exp" docName="draft-cullen-sdis-00" ipr="trust200902">
  <front>
    <title abbrev="SDIS/1.0">Semantic Data Interface Service -- SDIS/1.0</title>
    <author fullname="Aedan Cullen" initials="A." surname="Cullen">
<!-- <organization/> -->
      <address>
        <!-- postal><street/><city/><region/><code/><country/></postal -->
<!-- <phone/> -->
<!-- <facsimile/> -->
      <email>asc.cn04@gmail.com</email>
<!-- <uri/> -->
      </address>
    </author>
    <date year="2016" />
<!-- <area/> -->
<!-- <workgroup/> -->
      <keyword>semantic</keyword>
      <keyword>translation</keyword>
      <keyword>exchange</keyword>
<!-- <keyword/> -->
    <abstract>
      <t>
The Semantic Data Interface Service (SDIS) is a protocol defining a unified method for Internet services to exchange machine-readable and human-readable data either publicly or privately to other services or user agents.  SDIS uses an input/output model of data translation between predefined formats in order to allow consistent communication between services or user agents without requiring each to interpret the specialized APIs of others.  For example, this protocol could be used to create "chains" of interfaces, allowing complex operations to be performed by connecting an output of a service to an input of another, an output of the second service to an input of a third, and so on.  The protocol could also be used in conjunction with, for example, a Bluetooth Low Energy-based protocol to refer mobile devices to SDIS interfaces depending on location in order to provide content for augmented reality systems.  </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
        this document are to be interpreted as described in
        <xref target="RFC2119"/>.
      </t>
      <t>
        This document is being discussed on the xyz@example.org mailing list.
      </t>
      <t>
        The architecture of the World Wide Web is primarily being used to transfer human-readable information to user agents in the form of Hypertext Markup Language (HTML) documents. HTML, and also HTTP, are designed in a way that makes transmitting arbitrary data very simple -- an HTTP message body can contain almost any data, and on a higher level webpages can contain almost any type of content. Furthermore, these web pages can have varying layout and design, sometimes with multiple representing very similar data in differing formats. Essentially, when machine-readable data needs to be transferred, HTML and HTTP fall short. REST APIs attempt to solve this problem, using HTTP requests and responses to transfer machine-readable data, but the format of the data between multiple APIs is usually not consistent, meaning that for another service or a user agent to interpret data from one API, it needs to have been specifically intended to do so. The goal of SDIS is to provide a protocol that by design can input and output arbitrary machine-readable data in specific formats that are universally understood, therefore allowing any software to interact with any SDIS service simply by requesting a list of the input and output formats it supports. This protocol will also be designed for low-latency data transfer, allowing it to be used in applications that require multiple data transactions to take place within one TCP connection.
      </t>
	</section>
	<section title="Ideology and Terms">
	</section>
	<section title="Protocol Interaction over TCP">
	  <section title="Message Format">
	  </section>
	  <section title="Messages">
	    <section title="Handshake">
	    </section>
	    <section title="Operation Details">
	    </section>
	    <section title="Format Details">
	    </section>
      </section>
	</section>
	<section title="Server Tables">
	  <section title="Operation Table">
	  </section>
	  <section title="Format Table">
	  </section>
	</section>
	<section title="Usage Best Practices">
	  <section title="Data Format Allocation">
	  </section>
	  <section title="Operation Allocation">
	  </section>
	</section>
    <section anchor="Acknowledgements" title="Acknowledgements">
    </section>
    <section anchor="IANA" title="IANA Considerations">
    </section>
    <section anchor="Security" title="Security Considerations">
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
  </back>
</rfc>
